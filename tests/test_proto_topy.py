from proto_topy.entities import ProtoDict, ProtoModule, CompilationFailed
import pytest
import os
from pathlib import Path
from distutils.spawn import find_executable

protoc_path = Path(find_executable("protoc") or os.environ.get('PROTOC'))


def test_add_proto():
    proto = ProtoModule(file_path=Path("test1.proto"), content="")
    proto_dict = ProtoDict(compiler_path=protoc_path)
    proto_dict.add_proto(proto)
    assert Path("test1.proto") in proto_dict.protos


def test_add_proto2():
    proto_dict = ProtoDict(protoc_path, *(ProtoModule(file_path=Path("test2.proto"), content=""),
                                          ProtoModule(file_path=Path("test3.proto"), content="")),)
    assert Path("test2.proto") in proto_dict.protos
    assert Path("test3.proto") in proto_dict.protos


def test_bad_protoc():
    with pytest.raises(FileNotFoundError):
        proto_dict = ProtoDict(Path('dummy'))
        proto_dict.compile()


def test_no_protoc():
    with pytest.raises(TypeError):
        ProtoDict()


def test_compile_wrong_proto():
    proto_dict = ProtoDict(protoc_path, ProtoModule(file_path=Path("test4.proto"), content=""))
    with pytest.raises(CompilationFailed):
        proto_dict.compile()


def test_compile_minimal_proto():
    proto = ProtoModule(file_path=Path("test5.proto"), content="""
    syntax = "proto3";
    import "google/protobuf/timestamp.proto";
    message test5 {
        google.protobuf.Timestamp created = 1;
    }
    """)
    proto_dict = ProtoDict(protoc_path, proto)
    proto_dict.compile(global_scope={})
    assert "\n".join(proto.module_source.split("\n")[:4]) == '''# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: test5.proto
"""Generated protocol buffer code."""'''


def test_compile_minimal_proto_in_a_package():
    proto = ProtoModule(file_path=Path("p1/p2/p3/thing.proto"), content="""
    syntax = "proto3";
    import "google/protobuf/timestamp.proto";
    message thing {
        google.protobuf.Timestamp created = 1;
    }
    """)
    proto_dict = ProtoDict(protoc_path, proto)
    proto_dict.compile(global_scope={})
    assert "\n".join(proto.module_source.split("\n")[:4]) == '''# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: p1/p2/p3/thing.proto
"""Generated protocol buffer code."""'''


def test_compile_missing_dependency():
    proto = ProtoModule(file_path=Path("test.proto"), content="""
    syntax = "proto3";
    import "other.proto";
    """)
    proto_dict = ProtoDict(protoc_path, proto)
    with pytest.raises(CompilationFailed, match=r'other.proto: File not found.*'):
        proto_dict.compile()


def test_compile_ununsed_dependency():
    proto = ProtoModule(file_path=Path("test.proto"), content="""
    syntax = "proto3";
    import "other.proto";
    """)
    other_proto = ProtoModule(file_path=Path("other.proto"), content="""
    syntax = "proto3";
    import "google/protobuf/timestamp.proto";
    message other_thing {
        google.protobuf.Timestamp created = 1;
    }
    """)
    proto_dict = ProtoDict(protoc_path, proto, other_proto)
    proto_dict.compile()


def test_compile_simple_dependency():
    proto = ProtoModule(file_path=Path("p3/p4/test6.proto"), content="""
    syntax = "proto3";
    import "p1/p2/other2.proto";
    message test6 {
        other2_thing foo = 1;
    };
    """)
    other_proto = ProtoModule(file_path=Path("p1/p2/other2.proto"), content="""
    syntax = "proto3";
    import "google/protobuf/timestamp.proto";
    message other2_thing {
        google.protobuf.Timestamp created = 1;
    }
    """)
    proto_dict = ProtoDict(protoc_path, proto, other_proto)
    proto_dict.compile()
